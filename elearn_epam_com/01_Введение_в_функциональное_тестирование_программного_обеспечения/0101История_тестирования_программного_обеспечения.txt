// **************************************************************************************************************************************************************************
01 - 01 - История тестирования программного обеспечения
https://elearn.epam.com/courses/course-v1:EPAM+STI+RU/courseware/bbea8191c8864320b21544ae133022b4/50b199945cad4d3cb7cf3f41a238b6f4/1?activate_block_id=block-v1%3AEPAM%2BSTI%2BRU%2Btype%40vertical%2Bblock%4091be703e124c48b2815d3a08ebf40673&tpa_hint=oa2-prod-elearn-iam

Вопрос 1
"Исчерпывающее тестирование" - это...
- Тип тестирования.
- Уровень тестирования, состоящий из полного анализа требований и создания некоторых контрольных списков.
*- Подход к тестированию, при котором набор тестов включает все комбинации входных значений и предварительных условий.
- Тестовый подход, при котором приложение тестируется во всех поддерживаемых средах.

вопрос 2
Какая концепция тестирования программного обеспечения была самой ранней?
- Гибкое тестирование.
*- Положительное и отрицательное тестирование.
- Автоматизация тестирования.
- DevTestOps.

Вопрос 3
Было ли тестирование программного обеспечения тесно интегрировано с разработкой программного обеспечения с самого начала?
- Да, это было естественное положение вещей.
- Нет, нет возможности интегрировать эти действия.
- Нет, потому что тестирование программного обеспечения и разработка программного обеспечения редко выполняются одновременно.
*- Нет, интеграция становится видимой только при Agile-подходе.

КОНСПЕКТ
История развития тестирования и о том, с какими сложностями оно столкнулось и как приобрело сегодняшний вид.

50-60
В 50-60-е годы прошлого века, программирование из редкой экзотики превратилось в часть повседневной жизни.
Но тогда IT полностью влавствовал "Математический подход".
В его рамках пытались разработать метод, который доказывал бы, что программа работает во всех возможных состояниях и правильно переходит между ними.
Такой подход назвали "Исчерпывающее тестирование". Однако, к огромному сожалению, очень быстро было выяснено, что даже у самых простых программ существует огромное 
количество состояний.
Проверить программы во всех этих состояниях, во всех переходях между ними просто нереально.
Что касается сложных программ, то для выполнения такой деятельности потребовались бы просто миллионы и миллиарды лет.
Не зря "Тестирование" тех времен взято в кавычки, потому что оно куда больше было всего лишь небольшой частью процесса разработки.
Гораздо чаще представляло собой просто процесс "Отладки" (debugging) некоего ПО.

70
Тем не менее проблема с наличием дефектов в программах никуда не делась и в 70-е годы исследования продолжились.
Некоторые люди продолжали пытаться проверять проверять программы в тех состояниях в которых они должны работать, правда уже не концентрировались на всех возможных 
состояниях, а выбирали критически важные или просто важные для пользователя состояния.
Тем не менее гораздо более интересным и как оказалось результативным стал подход, в рамках которого пытались проверить не те состояния в которых программа работает,
а те состояния в которых программа не работает при условии что эти состояния также важны для конечного пользователя.
К сожалению обе эти попытки провалились.
Но тем не менее пройдя через десятилетия обе эти идеи многократно трансформировались и на сегодняшний день мы их знаем как позитивное и негативное тестирование.
Т.е. можно сказать что исследования 70-х готов не прошли зря.
И тем не менее в 70-х годах для тестирования все оставалось достаточно грустно.
 
80
А вот 80-е годы можно смело называть временем рождения тестирования в его нормальном понимании в его современном виде.
Здесь появились три тенденции определившие развитие отрасли на ближайшее время.
1. В первую очередь тестирование стали максимально интегрировать, переплетать с процессом разработки, преверащая из какого-то отдельного периодического процесса 
в повседневную деятельность.
2. Вторым достижением стало понимание, что предотвращение появления дефектов все-таки является намного более эффективным чем последующее устранение. Мы легко можем
понять это из аналогии в повседневной жизни - заботиться о здоровье проще и дешевле чем лечить болезни. Этот подход, связанный с предотвращением дефектов на самом деле 
оказался судьбоносным - оказал огромнейшее влияние на методологию разработки ПО.
3. А третьим достижением, без которого фактически современный этап представить не возможно, стало то что люди осознали и увидели что часть работы тестировщика великолепно 
может выполнять компьютер. Причем самую примитивную не приятную часть которая всегда скучна, не интересна для человека, т.е. уже в 80-е годы появились первые попытки 
автоматизации.
Все эти три достижения позволили тестированию получить признание как неотъемлемую часть IT отрасли и уже в свою очередь дали толчок появлению методологий, подходов,
стандартов и т.д. и т.п..

90
03:53 
https://elearn.epam.com/courses/course-v1:EPAM+STI+RU/courseware/bbea8191c8864320b21544ae133022b4/50b199945cad4d3cb7cf3f41a238b6f4/1?activate_block_id=block-v1%3AEPAM%2BSTI%2BRU%2Btype%40vertical%2Bblock%4091be703e124c48b2815d3a08ebf40673












